     第一章：初始java

1、java语言的特点
	简单性   
	可移植 跨平台
	面向对象
	健壮性和安全性
	多线程

2、java文件运行机制
java文件--》编译器--》class文件（字节码文件）--》
类装载器--》字节码校验器--》解释器--》运行
其中类装载器、字节码校验器、解释器合起来称为java虚拟机
JVM。（在内存中运行的）。
由于其中的编译器和解释器的存在，所以java语言可以跨平台、
可移植。

3、java开发环境的配置

4、我的第一个java程序
	java文件名称必须以.java为后缀，文件名称必须遵循
	标识符命名规范，首位必须是大写字母，驼峰命名法，
	后续字符可以是字母、数字、下划线。不能出现中文、
	空格及其他特殊。并且注意做到见名知意。
	文件里面写(类名称必须与文件名称完全相同。)
	public class 类名称{
	
	}
	书写代码时注意格式对齐，被包含的代码向右缩进4个空格。
5、注释
	单行注释  //
	多行注释  /*   代码  */
	文档注释  /**   */


第二章：java基础语法

1、关键字

2、数据类型
	基本数据类型
		整型
			byte   字节  占1个字节  对应数据库的tinyint
			short  短整数 占2个，对应数据的smallint
			int    整数 占4个字节，对应数据库的int
			long 长整数 占8个字节，对应数据库的bigint
		浮点型
			float    单精度浮点数
			double双精度浮点数
		布尔型
			boolean 取值只有true和false   
		字符型
			char 一般用单引号括起来，
			它可以和int类型互相转换。
	引用数据类型
		类
		接口
		数组

3、声明变量和赋值
数据类型  变量名称,变量名称;//声明变量
变量名称 = 值; //赋值

//声明变量 同时又赋值
数据类型  变量名称 = 值,变量名称 = 值;

注意：变量名称不能重复，必须遵循标识符命名规范，
且首位为小写字母，并要求做到见名知意。

int studentCount = 0;

4、声明常量
final 数据类型 常量名称 = 值;
常量名称一般使用全大写，不允许在程序中重新给它赋值。
声明常量也可以写在方法外部（类内部），此时一般情况
需要再加上static关键字修饰。

5、运算符
+  -  *  /  %
注意：+两端如果都是数值类型，则执行加法运算；
	  +的任意一端为字符串，则执行字符串拼接。
++ --
int i = 2;
System.out.println(i++);//输出2
System.out.println(++i);//输出3
++ -- 写在变量后面，表示先参与运算，然后再自增、自减。
++ -- 写在变量前面，表示先自增、自减，然后再参与运算。

读程序：
int i = 5, j = 8;
int a = (++i * i + --i/--j)%3;
int b = (--j * j--) * i++ - --j;
请问执行以上三行代码后，i，j，a，b的值分别为多少？

布尔表达式：经过一系列的运算之后，最终结果为true或者
false的表达式。
比较运算符： <  <=  >  >=  ==  !=  instanceof
三目运算符
布尔表达式?值1:值2;
含义：
当布尔表达式结果为true时，取问号和冒号之间的值；
当布尔表达式结果为false时，取冒号后面的值。

int i = 1<2&&1<0 ? 12 : 13;

赋值运算符 
=   +=  -=  *=  /=  %= 
int i = 3, j = 5;
i = i + 20; //  i += 20;
j = j + 20;//   j += 20;

i = i - 20; // i -= 20;
j = j - 20; // j -= 20;

与或非
短路与&&   ：两端的布尔表达式都为true时，最终结果为true；
其他情况都为false；当左边比尔表达式为false时，将忽略其
右边的布尔表达式。

短路或||      ：两端的布尔表达式任意一个为true，最终结果
为true；其他情况都为false；当左边布尔表达式为true时，将忽略其
右边的布尔表达式。

通路与&     ：两端的布尔表达式都为true时，最终结果为true；
其他情况都为false；不会忽略右边的布尔表达式。

通路或|       ：两端的布尔表达式任意一个为true，最终结果
为true；其他情况都为false；不会忽略右边的布尔表达式。

非  ----- 取反
!(布尔表达式)

6.数据类型转换
 6.1自动转换   
  1、小的往大的里面放，会自动转换为大的数据类型。
  2、字符类型自动转化int 类型
  3、当两个数值做运算，运算结果以大的数据类型为准。但byte、short、int这三种数据类型
     的数值作运算后，结果都为int类型。
  byte  short  int long  float（数字加f） double    小到大
 

 6.2   强制转换   将大的数据类型转化成稍小的数据类型

  1、（数据类型）值；
		short s1 = 7;
		short s2= 2;
		short s3 = (short)(s1+s2);

		int i=9;
		String s = i+"";
		String s2 = String.valueOf(i);
		String s2 = new Integer(i).toString();


		String s9 = "120";
		int i2= Integer.valueOf(s9);
		int i2= Integer.parseInt(s9);


		String d7 = "12.3";
		double d1 = Double.parseDouble(s9);
		double d2 = Double.valueOf(s9);



小练习：
int i = 5, j = 8;
i++ - --j < 10 && ++i * j++ < 5

第三章：程序流程控制

1、if分支语句
	1.1、单分支
		if(布尔表达式){
			代码;
		}
		当布尔表达式为true时，将进入后面的大括号内部执行。
		内部代码执行完毕后，程序会跳到反大括号}之后，继续执行分支语句
		外部后面的代码。
		当布尔表达式为false时，程序会跳到反大括号}之后，继续执行分支语句
		外部后面的代码。 
	1.2、双分支
		if(布尔表达式){
			代码1;
		}else{
			代码2;
		}
		如果布尔表达式为true则执行代码1，跳过代码2，然后执行分支语句之后
		的其他代码；
		如果布尔表达式为false，则跳过代码1，执行代码2，然后执行分支语句
		之后的其他代码；
	1.3、多分支
		if(布尔表达式1){
			代码1;
		}else if(布尔表达式2){      
			代码2;
		}else if(布尔表达式3){
			代码3;
		}else{
			代码4;
		}
	总结：
	  单分支语句大括号里面的代码有可能执行，也有可能不执行。
	  双分支语句要么执行if后面的大括号的代码，要么执行else后面的代码。
		只会执行其中一个分支，而且也必须会执行一个分支。
	  多分支语句：如果没写最后的else分支，则有可能执行其中一个分支，
		也有可能一个都不执行；如果写了else分支，则有且仅有一个分支
		被执行。并且else分支只能写在最后。

小练习：一家三口去游乐园，全票为50元/人，
小孩子1米以下并且15岁以下为3折，1米以上15岁以
下半价，15岁到18岁8折，18岁以上全票。
请书写程序，计算任何的三口之家的票价。


2、switch分支语句（多分支，一般用来作等值判断）
	switch(变量){
		case 值1 : 代码1;break;
		case 值2 : 代码2;
		case 值3 : 代码3;break;
		case 值4 : 代码4;break;
		default : 代码5;
	}
	break;表示跳出switch分支语句，若case语句后面没有break;的话，则要
	从上到下继续执行其他case语句，直到发现break;语句或switch分支语句
	结尾。
	switch分支语句的变量数据类型有要求，JDK1.6中变量的数据类型可以是
	byte、short、int、char、枚举类型。在JDK1.7中，额外还支持字符串String。

3、循环语句
	3.1、while循环  *****
	int i = 初始值;
	while(布尔表达式){
		代码;
		变量的值改变;(++   --)
	}
	练习：
		求1到100的整数的总和是多少。
		求1到100的所有偶数的总和。
	总结：当布尔表达式为true，则进入大括号执行代码；
	再次判断，直到布尔表达式为false时退出循环。
	有可能执行多次，也有可能执行0次。

	3.2、do...while循环
	int i = 初始值;
	do{
		代码;
		变量的值改变;(++   --)
	}while(布尔表达式);
	先执行大括号内的代码，再判断，如果布尔表达式为true则继续执行第二次；
	如果布尔表达式为false，则退出循环。
	do...while循环至少会执行一次。

	3.3、for循环     *****
	for(定义变量并初始化;布尔表达式;改变变量的值){
		代码;
	}
	for(int i=0; i<10; i++){
		代码;
	}

练习：
 * 2、找出100到999之间的所有的水仙花数
 * 水仙花数是一个三位整数，各位的立方和等于这个数本身，
 * 如153，1的立方+5的立方+3的立方=153，所以它就是水仙花数.
 *
 * 3、找出100到999之间的所有回文数
 * 设n是一任意自然数。若将n的各位数字反向排列所得自然数n1与n相等，
 * 则称n为一回文数。例如，若n=1234321，则称n为一回文数。
 *
 * 4、百钱买百鸡。
 * 公鸡单价5钱一只，母鸡单价3钱一只，小鸡3只1钱。
 * 要求用100钱刚好买一百只鸡，请问有多少种买法？
 * 公鸡、母鸡、小鸡各买多少只？

4、break;和continue;语句  *****
	break;语句可以用在switch语句和循环语句中；
	break;语句可以用在switch语句中表示跳出整个switch语句；
	break;语句可以用在循环语句中表示跳出整个循环；

	continue;语句只能用在循环语句中；表示结束本次循环，直接开始下一次
	循环。

第四章：类、对象和包

1、面向过程编程和面向对象编程的区别

2、概念--万物皆对象
	类：类是具有相同属性和行为的一组事物的统称。
	对象：对象是属于某个类的具体的某个事物。
	类是对象的统称，对象是类的实例。
3、创建一个类
	类里面只能写属性和方法，语句必须写在方法体内部。
	属性：又叫成员变量，也叫全局变量。它是写在类内部，方法的外部。
	一般情况属性都写在类内部最前面。
	只要是通过这个类创建出来的对象都会有这些属性。
	访问修饰符 数据类型 变量名称;
	属性的变量名称一般取名为一个名词。

	方法：（对象的行为）
	访问修饰符 返回数据类型 方法名称(形参列表){
		方法体;
	}
	方法名称一般取名为一个动词（或者加名称，加形容词）
4、实例化（创建对象）*****
	类名称 变量名称 = new 类名称();
	Employee emp = new Employee();//指令内存创建一个对象
5、访问对象的属性和方法*****
	.运算符   相当于“的”
	对象变量名称.属性名称 //获取对象的某个属性的值
	对象变量名称.属性名称 = 值;//修改对象的某个属性的值
	对象变量名称.方法名称(实参列表);
6、方法的定义和调用格式*****
	6.1、无返回 无参数
		public void test(){}
		对象变量名称.方法名称();
	6.2、有返回 无参数
		public int test(){
			return 1;
		}
		返回数据类型 变量 = 对象变量名称.方法名称();
	6.3、无返回 有参数
		public void test(String str, int i){}
		对象变量名称.方法名称("",2);
	6.4、有返回 有参数
		public int test(String str, int i){
			return 2;
		}
		返回数据类型 变量 = 对象变量名称.方法名称("",2);
	注意：
		形参：是指在方法定义时写在方法名称后面的小括号内部的参数列表。
  public Person(String name,String sex,int age){}
    （）里就是形参。         
		要求每个参数都有自己的数据类型，形参变量只在当前方法体内部有效。
		实参：是指在方法调用时，写在调用的方法名称后面的小括号内部的
   public static void main(String[] args){
     Person p = new Person("张三","男",50);
     p.move();

   Person p = new Person("张三","男",50);  是实参数据。

  参数列表。将这些值按照位置顺序一一赋值给形参变量。
  所以要求每个实参的数据必须符合相同位置的形参的数据类型。
  形参和实参个数必须相同，且都以逗号隔开。
练习：
	1、书写学生类，属性和方法自定，模拟每个学生作自我介绍。
	2、书写员工类，属性和方法自定，创建三个员工对象，分别计算他们的
	工资是多少?
	女性员工每月补贴100元，男性员工补贴200元。
	工龄5年以上者再补贴500元，3到5年者补贴300元。
7、this引用
	当前这个对象
	如果一个方法中使用了this引用，谁来调用此方法，this就代表谁。
	当方法有形参且形参与属性名称完全相同时，用this.属性名称来访问
	当前对象的某个属性的值，用形参变量来访问当前方法的形参。
	变量的作用域：*****
		当我们定义一个变量，它作用域范围在包含当前定义变量的语句的
		最近的一对大括号内有效。

8、分包
	今后的java程序会书写很多类文件，为了方便管理、开发、查找，所以需要在
	java程序根目录之下新建很多子文件夹分别来存放某些类文件。这种做法就叫
	分包。
	新建子文件夹--》新建类文件--》在类文件的第一行书写
		package 子文件夹名称.子文件夹名称;

	在其他java文件中若要使用刚刚打包的类，则需要在当前java文件的package
	语句下面，public class的上面书写
		import 子文件夹名称.子文件夹名称.类名称;



5章
1.方法调用站
2.按值变量
   方法调用时传入一个变量，其实是传入此变量的值，而不是把这个变量
传进去，
方法重载
在同一个类中，如果有多个方法名称相同，但形参列表不同 个数不同，
当调用重载的方法，JVM会根据调用的名称查找
，实参列表去匹配形参列表，然后确定调用那个方法
构造方法的书写
1 不能有返回类型
2 名称与类名称必须相同
3 构造方法可以重复
4.每一个类都默认都有一个隐藏的，无参的构造方法
 一旦书写一个构造方法，默认的无参


7章
 1、继承的概念
   当有一些对象与另一些对象有相同的属性和行为，我们可以将这些相同的属性和行为提出来
写在第三个类里面去。我们就称第三个类为父类，原先这两个类都是他的子类，这种关系就成为
继承。
   比如：教师和学生之间有相同属性，我们把相同属性提出来放进人类里面去，我们就可以说
教师继承人类，学生也继承人类。
2、语法
   public class A extends B{

}  A 类继承B类， A类是B类的子类，B类是A类的父类。  extends继承

 java语言当中只支持单继承，一个类最多只能继承一个类。一个父类允许有多个子类。
 子类一旦继承父类之后，将会拥有父类的所以属性和行为。

 我们书写的任何一个类（没有写任何继承），它默认继承Java.lang.Object类，
 Object类是java继承体系结构中最顶层的类，他是最终父类。

3、如何判定两种对象之间是否有继承关系
  is---a  比如：教师是一种人
  has--a

4、 继承的优点：
  1、提高代码的重用性
  2、易于扩展和维护
  3、子类拥有父类的所以属性和行为
  4、使程序设计更简单
5、方法重写
  在继承关系中，如果父类定义了一个普通方法，而子类里面也定义一个普通方法，跟父类的
方法名称相同，返回数据类型相同，形参列表相同（个数相同，顺序相同，数据类型相同），
子类访问修饰符权限大于等于父类，子类异常类型个数小于等于父类，我们就称子类重写了父类的方法。

6、为什么子类继承父类，它就拥有父类的所以属性和行为？
  因为在创建子类对象时会先调用父类构造方法，创建一个父类对象，然后再创建一个子类
对象，JVM会将这个父类对象与这个子类对象捆绑在一起，当成子类对象。
  所以子类继承父类就会拥有父类的所以属性和行为。
7、方法重写的效果
  当子类重写父类的方法，如果我们创建一个子类对象然后调用它重写后的方法则会执行重写后
的方法，就近原则。
 方法重写是多态的最重要的实现手段，

8、最终类和最终方法     final
  public final calss A{}  
最终类表示不能再被继承；
 
 public final void aa(){}
最终方法表示不能被子类重写；
  
 public final String str = "重庆"
最终变量-常量-值不能被修改；

苹果 葡萄 桃子 西瓜
不同的体验


8章
类的高级概念
 1、访问修饰符
public
         当前类        当前包里的子类    当前包其他类   其他包   其他包里的子类
           可以  （访问） 可以             可以            可以      可以
 
 protected 可以           可以             可以     可以，（不让修改）   不可以 

 默认值    可以           可以             可以           不可以     不可以

 private   可以           不可以           不可以         不可以      不可以


2.常用快捷键

ctrl +z 撤销
Alt+/    弹出提示代码
Tab      向右缩进4个空格
Shift+ tab 向左缩进4个
Ctrl + D   删除选中行
Alt+上   将选中行代码往上移
Alt +下  向下
Alt+左   回到上一个编辑过的文件中的
    右       下一个
Ctrl +f  查找
Ctrl +L  跳转到某一行
Ctrl +Shift+f  快速格式化，代码对齐
Ctrl+Shift+r   文件名称检索、查找
Ctrl+A     全选


3.封装
   将一个类文件对于外界而言，它是一个封闭的整体，将属性写为私有，根据实际情况提供
set 和get 方法，用来修改
1、封装利于分工协作
2、可以控制那些属性访问，那些不能访问，那些属性可以修改，那些属性不能修改
3、可以控制值的属性范围
4、对于类的使用者而言，不需要关心类的代码是怎么写。

4.静态成员
   在成员变量或者成员方法前面加上static修饰符。
   静态属性
   静态犯法

注意：静态成员属于类，非静态成员属于类的对象，不能在静态方法中访问非静态成员，可以在
非静态方法中访问静态成员。
静态成员是当前类的所有对象所共享的

访问格式： 使用类名调用 
          类名称.静态属性名称；  （获取他的静态属性）
          类名称.静态属性名称=值; （修改他的静态属性）
          类名称.静态方法名称（实参列表）;   有返回类型就去接收
          普通属性，普通方法
          对象.静态属性名称；
          
5.静态初始化块和实例初始化块
//静态方法
	public static String phone="中国" ;
//静态格式
	public static void test(){
		System.out.println("正在走路");
	}

静态初始化块   ，在类第一次被访问的时候执行一次，后面再访问这个类就不再执行了。
  	 
实例初始化块    在每次调用构造方法之前执行。 执行多次
{
  语句
}
	{
		System.out.println("实例化初始块");
		
	}

  抽象和多态：

   
   JAVA 下册
   
  常见运行异常
  
ClassNotFoundException 类文件找不到

IOException  输入//输出异常

NoSuchMethodException 找不到指定犯法

NoSuchFieldException  找不到属性名称

ParseException  字符转日期异常

RuntimeException 运行时异常
   NullPointerException 空对象异常
   IndexOutOfBoundsException  索引越界
       ArrayIndexOutOfBoundsException  数组索引越界
       StringIndexOutOfBoundsException  字符索引越界
   ClassCastException 强制转换异常
   numberformatexception 字符转整数，浮点异常

SQLException 连接数据库异常

  常用类
使用java.lang.包的类不需要import


System Runtime

*String

contains() 
字符串.contains(子字符串）

substring(int beginIndex) 

spilt()
String[] s=字符串.spilt(",");

replace("旧" , "新")

getbetys

getChars(int srcBegin(原字符起始索引), int srcEnd, char[] dst, int dstBegin(目标字符起始索引) 
          将字符从此字符串复制到目标字符数组。

toCharArray() 
          将此字符串转换为一个新的字符数组。

toLowerCase() 
          将原String 中的所有字符都转换为小写。
toLowerCase(Locale locale) 
          将原String 中的所有字符都转换为小写。

trim() 
          将原String 中的,忽略前空白和尾部空白。



*date Calendar 

Math



第十七章：I/O系统

InputStream 

OutputStream 

//与硬盘上的文件.tset关联
		File file=new File("D:/b.txt");
		
		//当文件不存在就创建一个空文件，已经存在则不创建
		try {
			file.createNewFile();
		} catch (IOException e) {
			
			e.printStackTrace();
		}


//与硬盘上的文件.tset关联
		File file=new File("D:/javaIo/test.txt");
		
		//当文件不存在就创建一个空文件，已经存在则不创建
		try {
			file.createNewFile();
		} catch (IOException e) {
			e.printStackTrace();
		}
		//删除文件 
		//file delete();
		
		//检测文件是否存在 
		//file.exsits();
		
		//获取文件名称
		String name =file.getName();
		System.out.println(name);
		
		//获取文件的父目录名称
		String parent =file.getParent();
		System.out.println(parent);
		
		//获取文件的父目录对象
		File parents=file.getParentFile();
		System.out.println(parents);
		
		//获取文件全路径
		String path =file.getPath();
		System.out.println(path);
		
		//判断是否为文件夹
		System.out.println(file.isDirectory());
		//判断是否为文件
		System.out.println(file.isFile());
		
		//获取文件大小 （字节）
		long l=file.length();
		System.out.println(l);
		
//获取此文件夹的所有子文件和子文件名称形成并返回数组
		String[] list=file.list();
		for(String s:list){
			System.out.println(s);
		}
		System.out.println(list);
		//获取此文件夹的所有子文件和子文件对象形成并返回数组
		//File[] file=file.listFiles();
		//for(File s:file){
		//	System.out.println(s);
		//}
		
		//创建没有的文件，但必须有父文件夹
		file.mkdir();
		//创建没有的文件和它没有的父文件夹 (常用型)
		file.mkdirs();
	

字节流	
try {
			// 与硬盘上的文件.tset关联
			File file = new File("D:/javaIo/test.txt");
			// 输入流
			InputStream in = new FileInputStream(file);

			File file1 = new File("D:/javaIo/aaa.txt");
			// 输出流
			OutputStream out = new FileOutputStream("D:/javaIo/aaa.txt");
			// int i;//每次循环读取一个字节 返回当前读取的字节的整数值
			// char c;
			// while ((i = in.read(b)) != -1) {
			// c = (char) i;
			// System.out.print(c);
			// }

			// 缓冲读取，效率高
			// byte[] b=new byte[10];
			// int j;//每次循环读取多个字节， 放进字节数组中，返回本次循环读取的字节数
			// String s="";
			// while((j = in.read(b)) != -1){
			// s+=new String(b,0,j);
			// }
			// System.out.println(s);

			byte[] b = new byte[100];
			int j;// 每次循环读取多个字节， 放进字节数组中，返回本次循环读取的字节数
			while ((j = in.read(b)) != -1) {
				out.write(b, 0, j);
			}
			out.flush();

		} catch (IOException e) {
			e.printStackTrace();
		}



字符流
	public static void main(String[] args) throws FileNotFoundException {

		try {
			//创建一个字符输入流
			Reader read = new FileReader("D:/javaIo/test.txt");
			//创建一个字符输出流
			Writer writer=new FileWriter("D:/javaIo/aaa.txt");
			
			//int j;
			//char c;
			//while((j=read.read())!= -1){
			//	c=(char)j;
			//	System.out.print(c);
			//}
			
			char[] b = new char[100];
			int i;// 每次循环读取多个字符， 放进字节数组中，返回本次循环读取的字符数量
			String s="";
			while ((i = read.read(b)) != -1) {
				s+=new String(b,0,i);
				writer.write(b,0,i);
			}
			writer.flush();
			System.out.println(s);
			
			}catch (IOException e) {
				e.printStackTrace();
			}
		    
		

	}
















                                                                    


